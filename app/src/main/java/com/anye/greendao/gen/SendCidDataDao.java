package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.haier.uhome.usend.staticcid.SendCidData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEND_CID_DATA".
*/
public class SendCidDataDao extends AbstractDao<SendCidData, Void> {

    public static final String TABLENAME = "SEND_CID_DATA";

    /**
     * Properties of entity SendCidData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cid = new Property(0, String.class, "cid", false, "CID");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
    };


    public SendCidDataDao(DaoConfig config) {
        super(config);
    }
    
    public SendCidDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEND_CID_DATA\" (" + //
                "\"CID\" TEXT," + // 0: cid
                "\"TIME\" TEXT);"); // 1: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEND_CID_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SendCidData entity) {
        stmt.clearBindings();
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(1, cid);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SendCidData entity) {
        stmt.clearBindings();
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(1, cid);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SendCidData readEntity(Cursor cursor, int offset) {
        SendCidData entity = new SendCidData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SendCidData entity, int offset) {
        entity.setCid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SendCidData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SendCidData entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
